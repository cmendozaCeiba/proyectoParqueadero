<?xml version="1.0" encoding="UTF-8"?>
<persistence version="2.1" xmlns="http://xmlns.jcp.org/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd">
     <persistence-unit name="parqueadero-persistence" transaction-type="RESOURCE_LOCAL">
     	<class>co.com.parqueadero.persistencia.entidad.ParqueaderoEntity</class>
     	
     	<exclude-unlisted-classes>true</exclude-unlisted-classes>
     	
     	<properties>
     		<property name="javax.persistence.jdbc.url" value="jdbc:h2:mem:parqueadero"/>
     		<!-- Driver de conexión a base de datos. -->
            <property name="javax.persistence.jdbc.driver" value="org.h2.Driver"/>
            <!-- Usuario de conexión a base de datos. -->
            <property name="javax.persistence.jdbc.user" value=""/>
            <!-- Contraseña de conexión a base de datos. -->
            <property name="javax.persistence.jdbc.password" value=""/>
            <!-- Indica la estrategia de generación de tablas a utilizar, los diferentes tipos son: - create: Crea la base de datos a partir de las entidades. - drop: Borra la base de datos señalada en las entidades. - drop-and-create: Borra y crea nuevamente la base de datos a partir de las entidades. - none: No realiza ninguna acción sobre la base de datos. Para el ejemplo utilizaremos create. -->
            <property name="javax.persistence.schema-generation.database.action" value="create"/>
            
            <property name="hibernate.show_sql" value="true"/>
     	</properties>
     	
     </persistence-unit>
 </persistence>